import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
} from "react-native";
import { Buffer } from "buffer";
import CustomButton from "./CustomButton";
import dgram from "react-native-udp";

const client = dgram.createSocket("udp4");
client.bind();

const App = () => {
  // udp reciever part
  const [receiverPort, setReceiverPort] = useState("5678");
  const [isListening, setIsListening] = useState(false);

  // udp sender part
  const [targetIP, setTargetIP] = useState("192.168.0.100");
  const [targetPort, setTargetPort] = useState("30000");
  const [messageToSend, setMessageToSend] = useState("Hi!  There");

  // response and logs
  const [logMessages, setLogMessages] = useState([]);

  // Function to handle UDP listening
  const handleListen = () => {
    if (isListening) {
      setIsListening(false);
      return;
    }

    const socket = dgram.createSocket("udp4");
    const port = parseInt(receiverPort, 10); // Ensure the port is an integer
    socket.bind(port);

    socket.on("error", (err) => {
      console.log(`Server error:\n${err.stack}`);
      socket.close();
      setIsListening(false);
    });

    socket.on("message", (msg, rinfo) => {
      console.log(
        `Received message from ${rinfo.address}:${rinfo.port}: ${msg}`
      );

      setLogMessages((prevLogMessages) => {
        const tmp = {
          address: rinfo.address,
          port: rinfo.port,
          message: msg.toString(),
        };
        return [tmp, ...prevLogMessages];
      });
    });

    socket.on("listening", () => {
      const address = socket.address();
      console.log(`Server listening ${address.address}:${address.port}`);
      setIsListening(true);
    });
  };

  // Function to handle UDP message sending
  const handleSend = () => {
    const message = Buffer.from(messageToSend);
    const port = parseInt(targetPort, 10); // Ensure the port is an integer
    if (isNaN(port) || port <= 0 || port > 65535) {
      console.error("Invalid port number:", targetPort);
      return;
    }
    client.send(message, undefined, message.length, port, targetIP, (err) => {
      if (err) {
        console.error("Error while sending message:", err.message);
      } else {
        console.log(`Message sent successfully to ${targetIP}:${port}`);
      }
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.scrollViewContent}>
      <View style={styles.container}>
        <View style={styles.section}>
          {/* UDP Receiver Section */}
          <Text style={styles.sectionTitle}>UDP Receiver</Text>
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Receiver Port</Text>
            <TextInput
              style={styles.input}
              placeholder="Receiver Port"
              value={receiverPort}
              onChangeText={setReceiverPort}
              keyboardType="numeric"
              editable={!isListening} // Disable input when isListening is true
            />
          </View>
          <CustomButton
            title="Listen"
            onPress={handleListen}
            isListening={isListening}
          />
        </View>

        <View style={styles.section}>
          {/* UDP Sender Section */}
          <Text style={styles.sectionTitle}>UDP Sender</Text>
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Target IP</Text>
            <TextInput
              style={styles.input}
              placeholder="Target IP"
              value={targetIP}
              onChangeText={setTargetIP}
            />
          </View>
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Target Port</Text>
            <TextInput
              style={styles.input}
              placeholder="Target Port"
              value={targetPort}
              onChangeText={setTargetPort}
              keyboardType="numeric"
            />
          </View>
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Message to Send</Text>
            <TextInput
              style={styles.input}
              placeholder="Message to Send"
              value={messageToSend}
              onChangeText={setMessageToSend}
            />
          </View>
          <CustomButton title="Send" onPress={handleSend} />
        </View>

        {/* Responses/Log Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Log</Text>
          <ScrollView style={styles.logContainer}>
            {logMessages.map((packet, index) => (
              <View key={index} style={styles.logMessageContainer}>
                <Text
                  style={styles.logMessageHeading}
                >{`[${packet.address}:${packet.port}]`}</Text>
                <Text style={styles.logMessage}>{`${packet.message}`}</Text>
              </View>
            ))}
          </ScrollView>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  section: {
    marginTop: 50,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
  },
  scrollViewContent: {
    flexGrow: 1,
  },
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f4f4f4", // Light background color
  },
  receivedDataText: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20,
    color: "#333", // Dark text color
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    marginBottom: 5,
    color: "#666", // Medium-dark text color
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: "#fff", // White background color
    marginBottom: 10,
  },
  logSection: {
    marginTop: 20,
    flex: 1, // Added to allow content to expand
  },
  logTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  logScrollView: {
    flexGrow: 1, // Added to allow content to expand
  },
  logContainer: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    padding: 10,
  },
  logMessageContainer: {
    marginBottom: 10,
  },
  logMessageHeading: {
    fontWeight: "bold",
    marginBottom: 5,
  },
  logMessage: {
    fontSize: 16,
  },
});

export default App;
